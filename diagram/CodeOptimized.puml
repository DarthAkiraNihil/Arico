@startuml CodeOptimized

start

    :Построить модель кодирования (базовое распределение);
    :Масштабировать значения границ распределения в соответствии с шириной кодового слова;

    :Установить scale = максимальная граница распределения + 1;
    :Установить low = 0, high = scale + 1;
    :Установить power_loss = 0 (счётчик исчезновения порядка);

    while (не конец входного потока) is (да)

        :Считать символ с входного потока в s;
        :range = high - low + 1;
        :high = low + range * верхная_граница_для_символа(s) / scale - 1;
        :low = low + range * нижняя_граница_для_символа(s) / scale;

        while (true) is (да)

            if (старшие разряды совпадают) then (да)

                :Вывести совпадающий разряд в выходной поток;

                while (power_loss != 0) is (да)

                    :Записать нужную цифру, в зависимости от того,
                    по какой границе произошло совпадение;

                    :power_loss--;

                endwhile (нет)

            else (нет)

                if (выполняется условие исчезновения порядка) then (да)

                    :Удалить вторые по значимости разряды из значений границ
                    и выполнить сдвиг оставшихся младших разрядов с дозаписью нужных цифр;
                    :power_loss++;

                else (нет)

                    break;

                endif

            endif

             :Выполнить сдвиг разрядов границ (в конец верхней границы добавить
            максимальную цифру текущей системы счисления) и отсечь лишние разряды;

        endwhile (нет)

    endwhile (нет)

    if (количество записанных цифр кратно ширине кодового слова) then (да)
        :Добавить в выходной поток столько нулей, сколько указано в ширине кодового слова;
    else (нет)
        :Дополнить выходной поток нулями до длины, кратной ширине кодового слова;
        :Добавить в выходной поток столько нулей, сколько указано в ширине кодового слова;
    endif

    :Результат кодирования в выходном потоке;

stop

@enduml